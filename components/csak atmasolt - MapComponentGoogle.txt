import React, { useEffect, useState } from 'react';
import { MapContainer, TileLayer, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css'; 
import 'leaflet.markercluster/dist/MarkerCluster.css'; 
import 'leaflet.markercluster/dist/MarkerCluster.Default.css'; 
import { ref, onValue } from 'firebase/database';
import { db } from './firebase-config';
import L from 'leaflet'; 
import 'leaflet.markercluster';

const defaultMarkerIcon = new L.Icon({
  iconUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-icon.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
  popupAnchor: [1, -34],
  shadowUrl: 'https://unpkg.com/leaflet@1.7.1/dist/images/marker-shadow.png',
});

const MarkerCluster = ({ markers }) => {
  const map = useMap();

  useEffect(() => {
    const markerClusterGroup = L.markerClusterGroup();

    markers.forEach((marker) => {
      const leafletMarker = L.marker(marker.position, { icon: defaultMarkerIcon })
        .bindPopup(`
          <div>
            <p><strong>Koordináta:</strong> (${marker.position[0].toFixed(5)}, ${marker.position[1].toFixed(5)})</p>
            <p><strong>Feltöltő:</strong> ${marker.uploaded_by}</p>
            <p><strong>Elemzés neve:</strong> ${marker.title}</p>
            <p><strong>Feltöltés időpontja:</strong> ${marker.timestamp}</p>
          </div>
        `);
      markerClusterGroup.addLayer(leafletMarker);
    });

    map.addLayer(markerClusterGroup);

    return () => {
      map.removeLayer(markerClusterGroup);
    };
  }, [map, markers]);

  return null;
};

const MapComponentGoogle = () => {
  const [locations, setLocations] = useState([]);
  const [competitions, setCompetitions] = useState([]);
  const [selectedCompetition, setSelectedCompetition] = useState(null);
  const [competitionType, setCompetitionType] = useState('active');

  useEffect(() => {
    const activeCompetitionsRef = ref(db, 'competitions');
    const archivedCompetitionsRef = ref(db, 'archivedCompetitions');

    const fetchCompetitions = () => {
      const unsubscribeActiveCompetitions = onValue(activeCompetitionsRef, (snapshot) => {
        const activeCompetitionsData = snapshot.val();
        const activeCompetitionsList = activeCompetitionsData
          ? Object.values(activeCompetitionsData).filter(comp => comp.active)
          : [];
        setCompetitions(prev => ({ ...prev, active: activeCompetitionsList }));
        if (competitionType === 'active') {
          const activeCompetition = activeCompetitionsList.length > 0 ? activeCompetitionsList[0].name : null;
          setSelectedCompetition(activeCompetition);
          fetchLocations(activeCompetition);
        }
      });

      const unsubscribeArchivedCompetitions = onValue(archivedCompetitionsRef, (snapshot) => {
        const archivedCompetitionsData = snapshot.val();
        const archivedCompetitionsList = archivedCompetitionsData
          ? Object.values(archivedCompetitionsData)
          : [];
        setCompetitions(prev => ({ ...prev, archived: archivedCompetitionsList }));
        if (competitionType === 'archived') {
          const archivedCompetition = archivedCompetitionsList.length > 0 ? archivedCompetitionsList[0].name : null;
          setSelectedCompetition(archivedCompetition);
          fetchLocations(archivedCompetition);
        }
      });

      return () => {
        unsubscribeActiveCompetitions();
        unsubscribeArchivedCompetitions();
      };
    };

    fetchCompetitions();
  }, [competitionType]);

  useEffect(() => {
    if (selectedCompetition) {
      fetchLocations(selectedCompetition);
    }
  }, [selectedCompetition]);

  const fetchLocations = (competitionName) => {
    const imagesRef = ref(db, 'images');
    const unsubscribe = onValue(imagesRef, (snapshot) => {
      const data = snapshot.val();
      if (data) {
        const locationsData = Object.values(data)
          .filter(item => item.competitionName === competitionName)
          .map(item => ({
            id: item.id,
            position: [parseFloat(item.latitude), parseFloat(item.longitude)],
            uploader: item.uploadedBy || 'Unknown',
            uploadTitle: item.title || 'No Title',
            timestamp: item.formattedTimestamp,
          }));
        setLocations(locationsData);
        console.log(locationsData);
      }
    });

    return () => unsubscribe();
  };

  const handleCompetitionChange = (event) => {
    setSelectedCompetition(event.target.value);
  };

  const handleCompetitionTypeChange = (event) => {
    setCompetitionType(event.target.value);
    setSelectedCompetition(null); 
  };

  return (
    <div>
      <div>
        <label htmlFor="competitionTypeSelect">Select Competition Type: </label>
        <select
          id="competitionTypeSelect"
          value={competitionType}
          onChange={handleCompetitionTypeChange}
        >
          <option value="active">Active Competitions</option>
          <option value="archived">Archived Competitions</option>
        </select>
        <label htmlFor="competitionSelect">Select Competition: </label>
        <select
          id="competitionSelect"
          value={selectedCompetition || ''}
          onChange={handleCompetitionChange}
        >
          {(competitions[competitionType] || []).map((comp) => (
            <option key={comp.name} value={comp.name}>{comp.name}</option>
          ))}
        </select>
      </div>
      <MapContainer 
        center={[47.25, 17.83]} 
        zoom={6} 
        style={{ width: '100%', height: '500px' }}
      >
        <TileLayer
          url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
          attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        />
        <MarkerCluster markers={locations} />
      </MapContainer>
    </div>
  );
};

export default MapComponentGoogle;
